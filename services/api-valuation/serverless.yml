service: api-valuation-service-${self:custom.projectName}
frameworkVersion: ">=1.44.0"

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  projectName: ${file(../../serverless.common.yml):custom.projectName}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-1
  environment:
    tableName: ${file(../../serverless.common.yml):custom.generalTableName}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-${self:custom.projectName}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-${self:custom.projectName}-ApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - '*'

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-offline-scheduler

functions:
  getValuation:
    handler: src/handler.getValuation
    events:
      - http:
          path: /valuation/{coins}
          method: get
          cors: true
#          authorizer: aws_iam
  getValuationForAllCoins:
    handler: src/handler.getValuationForAllCoins
    events:
      - http:
          path: /valuation/all
          method: get
          cors: true
#          authorizer: aws_iam
  logWalletValue:
    handler: src/handler.logWalletValue
    timeout: 10
    events:
      - schedule: rate(1 minute)
      - http:
          path: /valuation/log
          method: get
          cors: true
#          authorizer: aws_iam
#
#resources:
#    - ${file(../resources/cognito-policy.yml)}
